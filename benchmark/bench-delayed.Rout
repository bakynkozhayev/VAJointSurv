
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-delayed.RData")
> 
> # estimate the model with this package. Get the object we need for the
> # optimization while NOT account and accounting for the delayed entry
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> # the right way
> library(survival)
> surv_terminal <- surv_term(
+   Surv(delayed_entry, y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   with_frailty = TRUE,
+   # some have delayed entry
+   delayed = delayed_entry > 0)
> 
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   with_frailty = TRUE)
> 
> # the right way
> comp_obj <- joint_ms_ptr(
+   markers = list(marker_1, marker_2),
+   survival_terms = list(surv_terminal, surv_obs),
+   max_threads = 4L)
> 
> bench::mark(joint_ms_lb(comp_obj, comp_obj$start_val))
# A tibble: 1 × 13
  expression                                     min  median `itr/sec` mem_alloc
  <bch:expr>                                <bch:tm> <bch:t>     <dbl> <bch:byt>
1 joint_ms_lb(comp_obj, comp_obj$start_val)   5.87ms     6ms      157.    31.9KB
# … with 8 more variables: gc/sec <dbl>, n_itr <int>, n_gc <dbl>,
#   total_time <bch:tm>, result <list>, memory <list>, time <list>, gc <list>
> bench::mark(joint_ms_lb_gr(comp_obj, comp_obj$start_val))
# A tibble: 1 × 13
  expression                                      min median `itr/sec` mem_alloc
  <bch:expr>                                   <bch:> <bch:>     <dbl> <bch:byt>
1 joint_ms_lb_gr(comp_obj, comp_obj$start_val) 13.5ms 14.1ms      71.5    44.7KB
# … with 8 more variables: gc/sec <dbl>, n_itr <int>, n_gc <dbl>,
#   total_time <bch:tm>, result <list>, memory <list>, time <list>, gc <list>
> 
> system.time(opt_out <- joint_ms_opt(
+   comp_obj, par = comp_obj$start_val, max_it = 100L, pre_method = 3L,
+   cg_tol = .2, c2 = .1, gr_tol = 1))
   user  system elapsed 
 21.157   0.004   5.293 
Warning message:
In joint_ms_opt(comp_obj, par = comp_obj$start_val, max_it = 100L,  :
  Fit did not converge but returned with code -1. Perhaps increase the maximum number of iterations
> 
> opt_out$value
[1] 944.9413
> head(opt_out$par, 37)
 [1] -0.052023794  1.911622805  0.615863524  0.155929555  0.192712126
 [6] -0.924576070  0.661434723 -0.033687392  0.397676665 -0.024688573
[11] -0.403852877 -1.602129814 -0.905454940 -5.245694027 -0.132142693
[16] -0.262953378 -0.158181289  0.166328931  0.553547934 -0.291969167
[21]  0.121778216 -0.167398155  0.095528904 -0.866525573 -0.077649473
[26]  0.042681563 -0.059891510  0.075990372 -0.006864717 -0.200023208
[31]  0.064577680 -0.039906248 -0.246981415 -0.848926910 -2.179516321
[36] -0.280012141 -1.900204840
> 
> proc.time()
   user  system elapsed 
 26.628   0.084   7.671 
