
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-all.RData")
> 
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> library(survival)
> surv_terminal <- surv_term(
+   Surv(y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[1]])
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[2]])
> 
> comp_obj <- joint_ms_ptr(markers = list(marker_1, marker_2),
+                          survival_terms = list(surv_terminal, surv_obs),
+                          max_threads = 4L)
> 
> system.time(start_val <- joint_ms_start_val(comp_obj))
   user  system elapsed 
  4.183   0.003   1.054 
> 
> library(microbenchmark)
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L), times = 25)
Unit: microseconds
 expr      min       lq     mean   median       uq      max neval
 fn 1 1772.162 1826.260 1882.523 1867.102 1913.506 2105.245    25
 fn 2  924.317  970.470 1062.277 1037.241 1166.944 1223.398    25
 fn 4  499.497  579.737 1108.829 1132.054 1425.871 2917.987    25
 gr 1 8495.333 8587.725 8761.396 8691.137 8844.735 9395.892    25
 gr 2 4396.612 4502.780 4858.664 4631.050 4740.119 9795.648    25
 gr 4 2416.820 2633.163 3383.948 3296.208 3877.256 5113.577    25
> 
> # without caching
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1  5.274092  5.475120  5.650993  5.566990  5.726105  6.722197    25
 fn 2  2.737581  2.803807  2.955570  2.849503  3.028623  4.167912    25
 fn 4  1.495505  1.550497  2.481242  2.341048  3.273696  3.589107    25
 gr 1 11.916815 12.342978 12.524683 12.537630 12.646961 13.396811    25
 gr 2  6.114579  6.319270  6.509211  6.409027  6.629800  7.443978    25
 gr 4  3.394468  3.754496  4.361563  4.192928  4.594528  6.012220    25
> 
> proc.time()
   user  system elapsed 
  8.895   0.104   3.690 
