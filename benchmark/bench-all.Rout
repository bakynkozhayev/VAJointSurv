
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-all.RData")
> 
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> library(survival)
> surv_terminal <- surv_term(
+   Surv(y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[1]])
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[2]])
> 
> comp_obj <- joint_ms_ptr(markers = list(marker_1, marker_2),
+                          survival_terms = list(surv_terminal, surv_obs),
+                          max_threads = 4L)
> 
> system.time(start_val <- joint_ms_start_val(comp_obj))
   user  system elapsed 
  5.768   0.015   1.454 
> 
> library(microbenchmark)
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L), times = 25)
Unit: microseconds
 expr      min       lq     mean   median       uq      max neval
 fn 1 1876.342 1906.611 1986.448 1952.536 2020.838 2252.845    25
 fn 2  971.763 1016.094 1118.567 1084.910 1223.255 1397.189    25
 fn 4  549.083  611.679 1278.044 1154.817 1477.404 3039.798    25
 gr 1 8613.929 8771.908 8887.720 8832.191 8913.370 9478.474    25
 gr 2 4383.505 4475.067 4632.204 4627.656 4784.176 4971.398    25
 gr 4 2406.432 2591.059 3367.201 3308.666 3444.914 5647.239    25
> 
> # without caching
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1  5.209037  5.333381  5.436486  5.420339  5.535510  5.681575    25
 fn 2  2.658767  2.729071  2.846010  2.795723  2.906823  3.541211    25
 fn 4  1.449952  1.527678  2.483323  2.322077  3.268805  5.019349    25
 gr 1 11.906665 12.114338 12.210683 12.210360 12.321353 12.517197    25
 gr 2  6.172423  6.262072  6.502473  6.414084  6.541574  8.998317    25
 gr 4  3.351330  3.529628  4.291144  4.144065  4.364733  5.655125    25
> 
> proc.time()
   user  system elapsed 
 10.442   0.064   4.044 
