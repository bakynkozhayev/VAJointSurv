
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-all.RData")
> 
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> library(survival)
> surv_terminal <- surv_term(
+   Surv(y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[1]])
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[2]])
> 
> comp_obj <- joint_ms_ptr(markers = list(marker_1, marker_2),
+                          survival_terms = list(surv_terminal, surv_obs),
+                          max_threads = 4L)
> 
> system.time(start_val <- joint_ms_start_val(comp_obj))
   user  system elapsed 
  0.722   0.004   0.193 
> 
> library(microbenchmark)
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L), times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1  4.393021  4.488085  4.656423  4.596044  4.854777  5.025184    25
 fn 2  2.253452  2.361492  2.494890  2.519118  2.582112  2.700670    25
 fn 4  1.262802  1.355571  2.835198  3.011541  4.412665  4.628508    25
 gr 1 16.178206 16.714588 16.903591 16.898099 17.138339 17.375451    25
 gr 2  8.545689  8.839294  9.047819  8.919976  9.174415 11.357401    25
 gr 4  4.688097  5.425481  6.982264  7.747524  8.147853  8.726398    25
> 
> # without caching
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1 10.618046 10.975324 11.099348 11.081972 11.146486 12.689537    25
 fn 2  5.461808  5.558590  5.629302  5.619803  5.664565  5.857795    25
 fn 4  2.953094  3.028306  3.550127  3.666108  3.817313  4.533677    25
 gr 1 22.653846 23.059570 23.421856 23.295986 23.546390 26.552723    25
 gr 2 11.841258 11.910962 12.151515 12.115979 12.215032 12.987206    25
 gr 4  6.388838  6.958469  7.410551  7.270652  7.532792 12.892353    25
> 
> proc.time()
   user  system elapsed 
  7.933   0.124   4.140 
