
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-all.RData")
> 
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> library(survival)
> surv_terminal <- surv_term(
+   Surv(y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[1]])
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[2]])
> 
> comp_obj <- joint_ms_ptr(markers = list(marker_1, marker_2),
+                          survival_terms = list(surv_terminal, surv_obs),
+                          max_threads = 4L)
> 
> system.time(start_val <- joint_ms_start_val(comp_obj))
   user  system elapsed 
  1.967   0.020   0.581 
> 
> library(microbenchmark)
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L), times = 25)
Unit: microseconds
 expr      min       lq      mean   median       uq      max neval
 fn 1 1514.882 1559.925 1628.9626 1583.589 1709.021 1815.197    25
 fn 2  787.115  864.536  950.4112  958.235 1005.905 1264.183    25
 fn 4  434.299  491.490 1299.2714 1857.354 2008.667 2274.101    25
 gr 1 7461.340 7557.260 7780.2833 7596.534 7864.272 8576.230    25
 gr 2 3784.027 3952.159 4106.6288 4064.660 4127.212 4953.443    25
 gr 4 2110.633 2230.253 3345.0111 3712.028 3865.283 4355.110    25
> 
> # without caching
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1  5.057935  5.126935  5.255696  5.175471  5.298484  6.018338    25
 fn 2  2.570752  2.607424  2.700812  2.651212  2.702992  3.501177    25
 fn 4  1.392118  1.493633  1.681472  1.688293  1.761811  2.734236    25
 gr 1 10.919063 11.082890 11.343897 11.149098 11.279424 12.982506    25
 gr 2  5.702705  5.766265  5.842327  5.801994  5.867143  6.394347    25
 gr 4  3.035836  3.219612  3.371645  3.396536  3.508498  3.709624    25
> 
> proc.time()
   user  system elapsed 
  6.381   0.120   3.105 
