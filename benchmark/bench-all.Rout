
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(VAJointSurv)
Loading required package: survival
> load("bench-all.RData")
> 
> marker_1 <- marker_term(
+   Y1 ~ X1_1, id = id, subset(dat$marker_data, !is.na(Y1)),
+   time_fixef = ns_term(time, knots = c(3.33, 6.67), Boundary.knots = c(0, 10)),
+   time_rng = ns_term(time, knots = numeric(), Boundary.knots = c(0, 10),
+                      intercept = TRUE))
> marker_2 <- marker_term(
+   Y2 ~ 1, id = id, subset(dat$marker_data, !is.na(Y2)),
+   time_fixef = poly_term(time, degree = 2, raw = TRUE),
+   time_rng = poly_term(time, degree = 1, raw = TRUE, intercept = TRUE))
> 
> library(survival)
> surv_terminal <- surv_term(
+   Surv(y, event) ~ Z1, id = id, dat$terminal_outcome,
+   time_fixef = bs_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[1]])
> surv_obs <- surv_term(
+   Surv(lf_trunc, y, event) ~ 1, id = id, dat$obs_process,
+   time_fixef = ns_term(y, knots = 5, Boundary.knots = c(0, 10)),
+   ders = ders[[2]])
> 
> comp_obj <- joint_ms_ptr(markers = list(marker_1, marker_2),
+                          survival_terms = list(surv_terminal, surv_obs),
+                          max_threads = 4L)
> 
> system.time(start_val <- joint_ms_start_val(comp_obj))
   user  system elapsed 
  5.795   0.000   1.458 
> 
> library(microbenchmark)
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L), times = 25)
Unit: microseconds
 expr      min       lq     mean   median       uq      max neval
 fn 1 1731.610 1829.584 1889.504 1854.005 1917.037 2337.806    25
 fn 2  912.132  969.878 1103.685 1017.456 1175.862 1810.300    25
 fn 4  502.558  571.885 1269.345 1077.312 1445.119 3217.034    25
 gr 1 8477.319 8622.102 8724.356 8663.393 8833.803 9180.117    25
 gr 2 4355.606 4490.335 4629.206 4574.476 4739.279 5615.303    25
 gr 4 2361.572 2565.392 3360.350 3220.229 3409.398 5450.834    25
> 
> # without caching
> microbenchmark(
+   `fn 1` = joint_ms_lb   (comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `fn 2` = joint_ms_lb   (comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `fn 4` = joint_ms_lb   (comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   `gr 1` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 1L, cache_expansions = FALSE),
+   `gr 2` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 2L, cache_expansions = FALSE),
+   `gr 4` = joint_ms_lb_gr(comp_obj, start_val, n_threads = 4L, cache_expansions = FALSE),
+   times = 25)
Unit: milliseconds
 expr       min        lq      mean    median        uq       max neval
 fn 1  5.244517  5.366790  5.507044  5.562950  5.603521  5.828197    25
 fn 2  2.734543  2.772163  2.911836  2.897430  2.991431  3.206803    25
 fn 4  1.478653  1.591600  2.828088  3.207006  3.640251  4.200351    25
 gr 1 12.013296 12.168979 12.275650 12.224646 12.327322 12.835453    25
 gr 2  6.177546  6.302231  6.514841  6.480355  6.574217  7.979958    25
 gr 4  3.291445  3.466977  4.732313  5.136636  5.467361  6.172555    25
> 
> proc.time()
   user  system elapsed 
 10.488   0.071   4.037 
