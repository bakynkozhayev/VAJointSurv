% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/joint_surv_VA.R
\name{joint_ms_hess}
\alias{joint_ms_hess}
\title{Computes the Hessian}
\usage{
joint_ms_hess(
  object,
  par,
  quad_rule = object$quad_rule,
  cache_expansions = object$cache_expansions,
  eps = 1e-04,
  scale = 2,
  tol = .Machine$double.eps^(3/5),
  order = 6L,
  gh_quad_rule = object$gh_quad_rule
)
}
\arguments{
\item{object}{a joint_ms object from \code{\link{joint_ms_ptr}}.}

\item{par}{parameter vector for where the lower bound is evaluated at.}

\item{quad_rule}{list with nodes and weights for a quadrature rule for the
integral from zero to one.}

\item{cache_expansions}{\code{TRUE} if the expansions in the numerical
integration in the survival parts of the lower bound should be cached (not
recomputed). This requires more memory and may be an advantage
particularly with
expansions that take longer to compute (like \code{\link{ns_term}} and
\code{\link{bs_term}}). The computation time may be worse particularly if
you use more threads as the CPU cache is not well utilized.}

\item{eps, scale, tol, order}{parameter to pass to psqn. See
\code{\link{psqn_hess}}.}

\item{gh_quad_rule}{list with two numeric vectors called node and weight
with Gaussâ€“Hermite quadrature nodes and weights to handle delayed entry.
A low number of quadrature nodes and weights is used when \code{NULL} is
passed.
This seems to work well when delayed entry happens at time with large
marginal survival probabilities. The nodes and weights can be obtained e.g.
from \code{fastGHQuad::gaussHermiteData}.}
}
\description{
Computes the Hessian
}
